{"version":3,"sources":["global.js","App.js","reportWebVitals.js","index.js","Components/List.js","Components/Add.js","Components/Preview.js"],"names":["global","url","App","className","exact","path","List","Add","Preview","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","useStyles","makeStyles","root","maxWidth","media","height","Myflags","useState","data","setData","useEffect","axios","get","response","catch","error","classes","style","display","justifyContent","marginRight","alignItems","variant","textDecoration","to","pathname","margin","padding","marginTop","map","a","index","paddingBottom","width","component","alt","src","ImageUrl","title","lableName","size","color","state","option","upImg","setUpImg","imgRef","useRef","previewCanvasRef","unit","crop","setCrop","completedCrop","setCompletedCrop","showInput","setShowInput","objectLableName","setObjectLableName","React","open","setOpen","fileUpload","file","formData","FormData","newImage","File","type","append","post","headers","console","log","err","onLoad","useCallback","img","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","accept","onChange","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onImageLoaded","c","onComplete","value","id","label","disabled","onClick","toBlob","blob","generateDownload","ref","Math","round","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","event","reason","message","location","useLocation","toUpperCase"],"mappings":"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","file":"static/js/main.4c386a7f.chunk.js","sourcesContent":["global.url = \"http://localhost:4000\";\r\n","\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport List from \"./Components/List\";\nimport Add from \"./Components/Add\";\nimport Preview from \"./Components/Preview\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\">\n              <List />\n            </Route>\n            <Route path=\"/Add\">\n              <Add />\n            </Route>\n            <Route path=\"/Edit\">\n              <Preview />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./global\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nconst Myflags = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const getImageList = () => {\r\n    axios\r\n      .get(`${global.url}/api/image`)\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImageList();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <h1>Grasp Teaching</h1>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"end\",\r\n          marginRight: 30,\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Button variant=\"outlined\">\r\n          <Link\r\n            style={{ textDecoration: \"none\" }}\r\n            to={{\r\n              pathname: \"/Add\",\r\n            }}\r\n          >\r\n            Add Image\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          margin: 10,\r\n          padding: 10,\r\n          justifyContent: \"space-evenly\",\r\n          marginTop: 100,\r\n        }}\r\n      >\r\n        {data.map((a, index) => {\r\n          return (\r\n            <Card\r\n              key={index}\r\n              style={{ paddingBottom: \"10px\", width: \"100rem\", margin: 10 }}\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              className={classes.root}\r\n            >\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Dogs\"\r\n                  height=\"140\"\r\n                  src={`${global.url}${a.ImageUrl}`}\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <Card>{a.lableName}</Card>\r\n              </CardActionArea>\r\n              <CardActions\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-evenly\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Button variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                  <Link\r\n                    style={{ textDecoration: \"none\" }}\r\n                    to={{\r\n                      pathname: \"/Edit\",\r\n                      state: { ...a, option: \"preview\" },\r\n                    }}\r\n                  >\r\n                    preview\r\n                  </Link>\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Myflags;\r\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport axios, { post } from \"axios\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nexport default function App() {\r\n  const [upImg, setUpImg] = useState();\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [crop, setCrop] = useState({ unit: \"%\" });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [objectLableName, setObjectLableName] = useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const generateDownload = (canvas, crop) => {\r\n    if (!crop || !canvas) {\r\n      return;\r\n    }\r\n\r\n    canvas.toBlob(\r\n      (blob) => {\r\n        fileUpload(blob);\r\n      },\r\n      \"image/png\",\r\n      1\r\n    );\r\n  };\r\n\r\n  const fileUpload = (file) => {\r\n    setObjectLableName(\"\");\r\n    const url = `${global.url}/api/image`;\r\n    const formData = new FormData();\r\n    const newImage = new File([file], objectLableName, { type: file.type });\r\n    formData.append(\"image\", newImage);\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    post(url, formData, config)\r\n      .then((data) => {\r\n        console.log(data);\r\n        setOpen(true);\r\n        setObjectLableName(\"\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\r\n      reader.readAsDataURL(e.target.files[0]);\r\n      setShowInput(true);\r\n    }\r\n  };\r\n\r\n  const onLoad = useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = \"high\";\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n  }, [completedCrop]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Add Image To Crop The Object</h1>\r\n      <div>\r\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\r\n      </div>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div style={{ maxWidth: \"30%\", padding: 30 }}>\r\n          <ReactCrop\r\n            src={upImg}\r\n            onImageLoaded={onLoad}\r\n            crop={crop}\r\n            onChange={(c) => setCrop(c)}\r\n            onComplete={(c) => setCompletedCrop(c)}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            maxWidth: \"70%\",\r\n            padding: 30,\r\n            display: showInput ? \"block\" : \"none\",\r\n          }}\r\n        >\r\n          <div style={{ justifyContent: \"left\", display: \"flex\" }}>\r\n            <TextField\r\n              onChange={(e) => setObjectLableName(e.target.value)}\r\n              value={objectLableName}\r\n              id=\"standard-basic\"\r\n              style={{ marginRight: 30 }}\r\n              label=\"Lable Name\"\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              type=\"button\"\r\n              disabled={!completedCrop?.width || !completedCrop?.height}\r\n              onClick={() =>\r\n                generateDownload(previewCanvasRef.current, completedCrop)\r\n              }\r\n            >\r\n              Save cropped image\r\n            </Button>\r\n          </div>\r\n          <canvas\r\n            ref={previewCanvasRef}\r\n            // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\r\n            style={{\r\n              marginTop: 10,\r\n              width: Math.round(completedCrop?.width ?? 0),\r\n              height: Math.round(completedCrop?.height ?? 0),\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\",\r\n        }}\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        message=\"Image Uploaded Succesfully\"\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Preview = () => {\r\n  let location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <h1>{location.state.option.toUpperCase()}</h1>\r\n      <div>\r\n        <h1>{location.state.lableName}</h1>\r\n        <img src={`${global.url}${location.state.ImageUrl}`} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n"],"sourceRoot":""}